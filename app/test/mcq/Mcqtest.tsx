"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { Clock, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import PreparationTime from "@/components/PreparationTime"
import { Question } from "@/app/types/questions"

interface GeminiApiResponse {
  mcqs: Question[]
}

type Section = "A" | "B"

const MCQ_TEST_DURATION = 1200;

export default function McqTest({ resumeUrl }: { resumeUrl: string }) {
  const router = useRouter()
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedOption, setSelectedOption] = useState<string | null>(null)
  const [section] = useState<Section>("A")
  const [showPrep, setShowPrep] = useState(true)
  const [questions, setQuestions] = useState<Question[]>([])
  const [userAnswers, setUserAnswers] = useState<{ [key: number]: string }>({})
  const [error, setError] = useState<string | null>(null)
  const [timeLeft, setTimeLeft] = useState(MCQ_TEST_DURATION) 

  useEffect(() => {
    const fetchGeminiData = async () => {
      try {
        const res = await fetch("/api/gemini/mcq", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            cloudinaryPdfUrl: resumeUrl,
          }),
        })
        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.error || "Failed to fetch questions from API")
        }
        const data: GeminiApiResponse = await res.json();
        if (Array.isArray(data.mcqs) && data.mcqs.length > 0) {
          setQuestions(data.mcqs)
        } else {
          setError("No questions were generated by the AI. Please check the resume.")
        }
      } catch (err: any) {
        console.error("Error fetching questions:", err)
        setError(err.message || "An unexpected error occurred while fetching questions.")
      }
    }
    fetchGeminiData()
  }, [resumeUrl])

  // Timer effect
  useEffect(() => {
    if (!showPrep) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            handleFinishTest()
            return 0
          }
          return prev - 1
        })
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [showPrep])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const handlePrepComplete = () => {
    setShowPrep(false)
  }

  const handleOptionSelect = (option: string) => {
    setSelectedOption(option)
    setUserAnswers((prev) => ({
      ...prev,
      [currentQuestionIndex]: option,
    }))
  }

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1)
      setSelectedOption(userAnswers[currentQuestionIndex + 1] || null)
    } else {
      handleFinishTest()
    }
  }

  const handleFinishTest = () => {
    let score = 0
    const results = questions.map((question, index) => {
      const userAnswer = userAnswers[index]
      const isCorrect = userAnswer === question.correctAnswer
      if (isCorrect) score++
      return {
        questionIndex: index,
        question: question.question,
        options: question.options,
        userAnswer: userAnswer || null,
        correctAnswer: question.correctAnswer,
        isCorrect,
      }
    })
    localStorage.removeItem('mcqResults');
    localStorage.setItem('mcqResults', JSON.stringify({
      results: results,
      score
    }))
    router.push("/test/written")
  }

  useEffect(() => {
    setSelectedOption(userAnswers[currentQuestionIndex] || null)
  }, [currentQuestionIndex, userAnswers])

  if (showPrep) {
    return <PreparationTime section={section} onFinish={handlePrepComplete} />
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-screen bg-background">
        <div className="text-center p-8 bg-destructive/10 border border-destructive/20 text-destructive shadow-lg rounded-lg">
          <h2 className="text-2xl font-bold mb-4">Error Loading Questions</h2>
          <p className="text-lg mb-6">{error}</p>
          <Button onClick={() => router.push("/")} variant="outline">
            Return Home
          </Button>
        </div>
      </div>
    )
  }

  const currentQuestion = questions[currentQuestionIndex]

  if (!currentQuestion) {
    return (
      <div className="flex justify-center items-center h-screen bg-background">
        <div className="text-center p-8 bg-destructive/10 border border-destructive/20 text-destructive shadow-lg rounded-lg">
          <h2 className="text-2xl font-bold mb-4">Questions Not Found</h2>
          <p className="text-lg">There seems to be an issue displaying the current question. Please try refreshing.</p>
        </div>
      </div>
    )
  }

  const progress = ((currentQuestionIndex + 1) / questions.length) * 100

  return (
    <div className="min-h-screen bg-background">
      <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 items-center justify-between">
          <div className="flex items-center ml-8">
            <span className="text-xl font-bold">MCQ Section</span>
          </div>
          <div className="flex items-center gap-2 bg-card px-4 py-2 rounded-lg border mr-8">
            <Clock className="h-5 w-5 text-primary" />
            <span className="font-mono text-xl font-bold text-primary">{formatTime(timeLeft)}</span>
          </div>
        </div>
      </div>
      <div className="container py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm">
              <span className="text-muted-foreground">
                Question {currentQuestionIndex + 1} of {questions.length}
              </span>
              <span className="text-muted-foreground">{Math.round(progress)}% Complete</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
          <Card className="border-none shadow-lg">
            <CardContent className="p-8">
              <div className="space-y-8">
                <div className="space-y-4">
                  <h2 className="text-2xl font-semibold leading-relaxed">{currentQuestion.question}</h2>
                </div>
                <div className="space-y-3">
                  {currentQuestion.options.map((optionText, index) => {
                    const isSelected = selectedOption === optionText
                    const optionLetter = String.fromCharCode(65 + index)
                    return (
                      <button
                        key={index}
                        onClick={() => handleOptionSelect(optionText)}
                        className={`
                          w-full text-left p-4 rounded-lg border-2 transition-all duration-200
                          flex items-start gap-4 group hover:border-primary/50
                          ${isSelected ? "border-primary bg-primary/5 shadow-sm" : "border-border hover:bg-muted/50"}
                        `}
                      >
                        <div
                          className={`
                          flex-shrink-0 w-8 h-8 rounded-full border-2 flex items-center justify-center
                          text-sm font-semibold transition-colors
                          ${
                            isSelected
                              ? "border-primary bg-primary text-primary-foreground"
                              : "border-muted-foreground/30 group-hover:border-primary/50"
                          }
                        `}
                        >
                          {optionLetter}
                        </div>
                        <span className="flex-1 pt-1">{optionText}</span>
                      </button>
                    )
                  })}
                </div>
                <div className="flex justify-end pt-4">
                  <Button
                    onClick={handleNextQuestion}
                    disabled={!selectedOption}
                    size="lg"
                    className="flex items-center gap-2"
                  >
                    {currentQuestionIndex < questions.length - 1 ? (
                      <>
                        Next Question
                        <ChevronRight className="h-4 w-4" />
                      </>
                    ) : (
                      "Submit"
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card> 
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
