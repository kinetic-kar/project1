"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { Clock, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import PreparationTime from "@/components/PreparationTime"
import { Textarea } from "@/components/ui/textarea"
import { useTestSetup } from "@/app/hooks/useTestSetup"
import { WrittenResult } from "@/app/types/results"

interface Question {
  question: string
}

interface GeminiApiResponse {
  written: Question[]
}

type Section = "A" | "B"

const WRITTEN_TEST_DURATION = 1500

export default function WrittenTest({ resumeUrl }: { resumeUrl: string }) {
  const router = useRouter()
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [answers, setAnswers] = useState<{ [key: number]: string }>({})
  const [section] = useState<Section>("B") 
  const [showPrep, setShowPrep] = useState(true)
  const [questions, setQuestions] = useState<Question[]>([])
  const [error, setError] = useState<string | null>(null)
  const [timeLeft, setTimeLeft] = useState(WRITTEN_TEST_DURATION)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const { cleanupMedia } = useTestSetup()

  useEffect(() => {
    const fetchGeminiData = async () => {
      try {
        const res = await fetch("/api/gemini/written", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            cloudinaryPdfUrl: resumeUrl,
          }),
        })
        if (!res.ok) {
          const errorData = await res.json()
          throw new Error(errorData.error || "Failed to fetch questions from API")
        }
        const data: GeminiApiResponse = await res.json()
        if (Array.isArray(data.written) && data.written.length > 0) {
          setQuestions(data.written)
        } else {
          setError("No questions were generated by the AI. Please check the resume.")
        }
      } catch (err: any) {
        console.error("Error fetching questions:", err)
        setError(err.message || "An unexpected error occurred while fetching questions.")
      }
    }
    fetchGeminiData()
  }, [resumeUrl])

  // Timer effect
  useEffect(() => {
    if (!showPrep) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            handleFinishTest()
            return 0
          }
          return prev - 1
        })
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [showPrep])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, "0")}`
  }

  const handlePrepComplete = () => {
    setShowPrep(false)
  }

  const handleAnswerChange = (value: string) => {
    setAnswers((prev) => ({
      ...prev,
      [currentQuestionIndex]: value,
    }))
  }

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1)
    } else {
      handleFinishTest()
    }
  }

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex((prev) => prev - 1)
    }
  }

  const handleFinishTest = async () => {
    setIsSubmitting(true)
    try {
      const questionAnswerPairs = questions.map((q, index) => ({
        question: q.question,
        answer: answers[index] || ""
      }))
      const response = await fetch("/api/gemini/written/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          questionAnswerPairs,
        }),
      })
      if (!response.ok) {
        throw new Error("Failed to submit answers")
      }
      const data = await response.json();
      const results: WrittenResult[] = data.results;
      console.log(results);
      let score = 0;
      results.forEach(element => {
        score += element.score;
      });
      localStorage.removeItem('writtenResults');
      localStorage.setItem('writtenResults', JSON.stringify({
          results: results,
          score
        }
      ));
      await cleanupMedia();
      router.push("/test/results");
    } catch (error) {
      console.error("Error submitting answers:", error)
    } finally {
      setIsSubmitting(false)
    }
  }

  if (showPrep) {
    return <PreparationTime section={section} onFinish={handlePrepComplete} />
  }

  if (error) {
    return (
      <div className="flex justify-center items-center h-screen bg-background">
        <div className="text-center p-8 bg-destructive/10 border border-destructive/20 text-destructive shadow-lg rounded-lg">
          <h2 className="text-2xl font-bold mb-4">Error Loading Questions</h2>
          <p className="text-lg mb-6">{error}</p>
          <Button onClick={() => router.push("/")} variant="outline">
            Return Home
          </Button>
        </div>
      </div>
    )
  }

  const currentQuestion = questions[currentQuestionIndex]
  const currentAnswer = answers[currentQuestionIndex] || ""

  if (!currentQuestion) {
    return (
      <div className="flex justify-center items-center h-screen bg-background">
        <div className="text-center p-8 bg-destructive/10 border border-destructive/20 text-destructive shadow-lg rounded-lg">
          <h2 className="text-2xl font-bold mb-4">Questions Not Found</h2>
          <p className="text-lg">There seems to be an issue displaying the current question. Please try refreshing.</p>
        </div>
      </div>
    )
  }

  const progress = ((currentQuestionIndex + 1) / questions.length) * 100

  return (
    <div className="min-h-screen bg-background">
      <div className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 items-center justify-between">
          <div className="flex items-center ml-8">
            <span className="text-xl font-bold">Written Section</span>
          </div>
          <div className="flex items-center gap-2 bg-card px-4 py-2 rounded-lg border mr-8">
            <Clock className="h-5 w-5 text-primary" />
            <span className="font-mono text-xl font-bold text-primary">{formatTime(timeLeft)}</span>
          </div>
        </div>
      </div>
      <div className="container py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm">
              <span className="text-muted-foreground">
                Question {currentQuestionIndex + 1} of {questions.length}
              </span>
              <span className="text-muted-foreground">{Math.round(progress)}% Complete</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
          <Card className="border-none shadow-lg">
            <CardContent className="p-8">
              <div className="space-y-8">
                <div className="space-y-4">
                  <h2 className="text-2xl font-semibold leading-relaxed">{currentQuestion.question}</h2>
                </div>
                <div className="space-y-6">
                  <Textarea
                    value={currentAnswer}
                    onChange={(e) => handleAnswerChange(e.target.value)}
                    className="min-h-[200px]"
                    placeholder="Type your answer here..."
                  />
                  <div className="text-sm text-muted-foreground">
                    Tip: Be detailed and specific in your response. Aim for at least 3-5 sentences.
                  </div>
                </div>
                <div className="flex justify-between pt-4">
                  <Button
                    onClick={handlePreviousQuestion}
                    disabled={currentQuestionIndex === 0}
                    variant="outline"
                    size="lg"
                  >
                    Previous
                  </Button>
                  <Button
                    onClick={currentQuestionIndex < questions.length - 1 ? handleNextQuestion : handleFinishTest}
                    size="lg"
                    className="flex items-center gap-2"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      "Submitting..."
                    ) : currentQuestionIndex < questions.length - 1 ? (
                      <>
                        Next Question
                        <ChevronRight className="h-4 w-4" />
                      </>
                    ) : (
                      "Submit Test"
                    )}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
